USER-SUPPLIED VALUES:
certmanager:
  createCustomResource: false
  install: false
  nameOverride: cert-manager
  rbac:
    create: true
  webhook:
    enabled: false
gitlab:
  task-runner:
    antiAffinityLabels:
      matchLabels:
        app: gitaly
    replicas: 1
gitlab-runner:
  install: false
  podAnnotations:
    gitlab.com/prometheus_port: 9252
    gitlab.com/prometheus_scrape: "true"
  rbac:
    create: true
  runners:
    cache:
      cacheShared: true
      cacheType: s3
      s3BucketLocation: us-east-1
      s3BucketName: runner-cache
      s3CacheInsecure: false
      s3CachePath: gitlab-runner
    locked: false
global:
  antiAffinity: soft
  appConfig:
    artifacts:
      bucket: gitlab-artifacts
      connection: {}
      enabled: true
      proxy_download: true
    backups:
      bucket: gitlab-backups
      tmpBucket: tmp
    contentSecurityPolicy:
      enabled: false
      report_only: true
    cron_jobs: {}
    defaultCanCreateGroup: true
    defaultProjectsFeatures:
      builds: true
      issues: true
      mergeRequests: true
      snippets: true
      wiki: true
    defaultTheme: null
    dependencyProxy:
      bucket: gitlab-dependency-proxy
      connection: {}
      enabled: false
      proxy_download: true
    enableImpersonation: null
    enableSeatLink: true
    enableUsagePing: true
    externalDiffs:
      bucket: gitlab-mr-diffs
      connection: {}
      enabled: false
      proxy_download: true
      when: null
    extra:
      googleAnalyticsId: null
      matomoSiteId: null
      matomoUrl: null
    gitlab_kas: {}
    gravatar:
      plainUrl: null
      sslUrl: null
    incomingEmail:
      address: ""
      enabled: false
      expungeDeleted: false
      host: imap.gmail.com
      idleTimeout: 60
      logger:
        logPath: /dev/stdout
      mailbox: inbox
      password:
        key: password
        secret: ""
      port: 993
      ssl: true
      startTls: false
      user: ""
    initialDefaults: {}
    issueClosingPattern: null
    ldap:
      preventSignin: false
      servers: {}
    lfs:
      bucket: git-lfs
      connection: {}
      enabled: true
      proxy_download: true
    maxRequestDurationSeconds: null
    object_store:
      connection: {}
      enabled: false
      proxy_download: true
      storage_options: {}
    omniauth:
      allowBypassTwoFactor: []
      allowSingleSignOn:
      - saml
      autoLinkLdapUser: false
      autoLinkSamlUser: false
      autoLinkUser: []
      autoSignInWithProvider: null
      blockAutoCreatedUsers: true
      enabled: false
      externalProviders: []
      providers: []
      syncProfileAttributes:
      - email
      syncProfileFromProvider: []
    packages:
      bucket: gitlab-packages
      connection: {}
      enabled: true
      proxy_download: true
    pseudonymizer:
      bucket: gitlab-pseudo
      configMap: null
      connection: {}
    sentry:
      clientside_dsn: null
      dsn: null
      enabled: false
      environment: null
    serviceDeskEmail:
      address: ""
      enabled: false
      expungeDeleted: false
      host: imap.gmail.com
      idleTimeout: 60
      logger:
        logPath: /dev/stdout
      mailbox: inbox
      password:
        key: password
        secret: ""
      port: 993
      ssl: true
      startTls: false
      user: ""
    smartcard:
      CASecret: null
      clientCertificateRequiredHost: null
      enabled: false
      requiredForGitAccess: false
      sanExtensions: false
    terraformState:
      bucket: gitlab-terraform-state
      connection: {}
      enabled: false
    uploads:
      bucket: gitlab-uploads
      connection: {}
      enabled: true
      proxy_download: true
    usernameChangingEnabled: true
    webhookTimeout: null
  application:
    allowClusterRoles: true
    create: false
    links: []
  busybox:
    image:
      repository: busybox
      tag: latest
  certificates:
    customCAs: []
    image:
      repository: registry.gitlab.com/gitlab-org/build/cng/alpine-certificates
      tag: 20191127-r2
  common:
    labels: {}
  deployment:
    annotations: {}
  edition: ce
  email:
    display_name: GitLab
    from: ""
    reply_to: ""
    smime:
      certName: tls.crt
      enabled: false
      keyName: tls.key
      secretName: ""
    subject_suffix: ""
  extraEnv: {}
  geo:
    enabled: false
    nodeName: null
    psql:
      password: {}
    role: primary
  gitaly:
    authToken: {}
    enabled: true
    external: []
    internal:
      names:
      - default
    service:
      externalPort: 8075
      internalPort: 8075
      name: gitaly
      tls:
        externalPort: 8076
        internalPort: 8076
      type: ClusterIP
    tls:
      enabled: false
  gitlab:
    license: {}
  grafana:
    enabled: false
  hosts:
    domain: fc277073030.com
    externalIP: null
    gitlab: {}
    hostSuffix: null
    https: false
    kas: {}
    minio:
      ingress:
        enable: true
        tls:
          enable: true
          secretName: gitlab-minio-tls
      name: gitlab-minio.fc277073030.com

    pages: {}
    registry: {}
    smartcard: {}
    ssh: null
    tls: {}
  ingress:
    annotations: {}
    class: nginx
    configureCertmanager: false
    enabled: true
    tls:
      enabled: true
      secretName: gitlab-tls
  initialRootPassword: {}
  kas:
    enabled: false
  kubectl:
    image:
      pullSecrets: []
      repository: registry.gitlab.com/gitlab-org/build/cng/kubectl
      tag: 1.13.12
    securityContext:
      fsGroup: 65534
      runAsUser: 65534
  minio:
    credentials: {}
  operator:
    enabled: false
    rollout:
      autoPause: true
  pages:
    accessControl: false
    apiSecret: {}
    artifactsServer: true
    enabled: false
    externalHttp: []
    externalHttps: []
    host: null
    https: null
    objectStore:
      bucket: gitlab-pages
      connection: {}
      enabled: true
    path: null
    port: null
  pod:
    labels: {}
  praefect:
    authToken: {}
    autoMigrate: true
    dbSecret: {}
    enabled: false
    psql:
      sslMode: disable
    service:
      externalPort: 8075
      internalPort: 8075
      name: praefect
      tls:
        externalPort: 8076
        internalPort: 8076
      type: ClusterIP
    tls:
      enabled: false
    virtualStorages:
    - gitalyReplicas: 3
      maxUnavailable: 1
      name: default
  psql:
    connectTimeout: null
    password: {}
  rails:
    bootsnap:
      enabled: true
  railsSecrets: {}
  redis:
    password:
      enabled: true
  registry:
    bucket: registry
    certificate:
      secret:
    httpSecret: {}
    notifications: {}
  runner:
    registrationToken: {}
  service:
    annotations: {}
    labels: {}
  serviceAccount:
    annotations: {}
    create: true
    enabled: false
  shell:
    authToken: {}
    hostKeys: {}
  smtp:
    address: smtp.mailgun.org
    authentication: plain
    enabled: false
    openssl_verify_mode: peer
    password:
      key: password
      secret: ""
    port: 2525
    starttls_auto: false
    user_name: ""
  time_zone: UTC
  tracing:
    connection:
      string: ""
    urlTemplate: ""
  webservice:
    workerTimeout: 60
  workhorse:
    serviceName: webservice-default
grafana:
  admin:
    existingSecret: bogus
  command:
  - sh
  - -x
  - /tmp/scripts/import-secret.sh
  env:
    GF_SECURITY_ADMIN_PASSWORD: bogus
    GF_SECURITY_ADMIN_USER: bogus
  extraConfigmapMounts:
  - configMap: gitlab-grafana-import-secret
    mountPath: /tmp/scripts
    name: import-secret
    readOnly: true
  extraSecretMounts:
  - defaultMode: 400
    mountPath: /tmp/initial
    name: initial-password
    readOnly: true
    secretName: gitlab-grafana-initial-password
  grafana.ini:
    server:
      root_url: http://localhost/-/grafana/
  sidecar:
    dashboards:
      enabled: true
      label: gitlab_grafana_dashboard
    datasources:
      enabled: true
      label: gitlab_grafana_datasource
  testFramework:
    enabled: false
nginx-ingress:
  controller:
    addHeaders:
      Referrer-Policy: strict-origin-when-cross-origin
    admissionWebhooks:
      enabled: false
    config:
      hsts: "false"
      hsts-include-subdomains: "false"
      server-name-hash-bucket-size: "256"
      server-tokens: "false"
      ssl-ciphers: ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA:ECDHE-RSA-AES128-SHA:AES256-GCM-SHA384:AES128-GCM-SHA256:AES256-SHA256:AES128-SHA256:AES256-SHA:AES128-SHA:!aNULL:!eNULL:!EXPORT:!DES:!MD5:!PSK:!RC4
      ssl-protocols: TLSv1.3 TLSv1.2
      use-http2: "true"
    metrics:
      enabled: true
      service:
        annotations:
          gitlab.com/prometheus_port: "10254"
          gitlab.com/prometheus_scrape: "true"
          prometheus.io/port: "10254"
          prometheus.io/scrape: "true"
    minAvailable: 1
    publishService:
      enabled: true
    replicaCount: 2
    resources:
      requests:
        cpu: 100m
        memory: 100Mi
    scope:
      enabled: true
    service:
      externalTrafficPolicy: Local
  defaultBackend:
    enabled: true
    minAvailable: 1
    replicaCount: 1
    resources:
      requests:
        cpu: 5m
        memory: 5Mi
  enabled: false
  rbac:
    create: true
    scope: true
  serviceAccount:
    create: true
  tcpExternalConfig: "true"
postgresql:
  existingSecret: bogus
  image:
    tag: 11.9.0
  initdbScriptsConfigMap: bogus
  install: true
  master:
    extraVolumeMounts:
    - mountPath: /docker-entrypoint-preinitdb.d/init_revision.sh
      name: custom-init-scripts
      subPath: init_revision.sh
    podAnnotations:
      postgresql.gitlab/init-revision: "1"
  metrics:
    enabled: true
  postgresqlDatabase: gitlabhq_production
  postgresqlPostgresPassword: bogus
  postgresqlUsername: gitlab
  usePasswordFile: true
prometheus:
  alertmanager:
    enabled: false
  alertmanagerFiles:
    alertmanager.yml: {}
  install: false
  kubeStateMetrics:
    enabled: false
  nodeExporter:
    enabled: false
  pushgateway:
    enabled: false
  rbac:
    create: true
  server:
    retention: 15d
  serverFiles:
    prometheus.yml:
      scrape_configs:
      - job_name: prometheus
        static_configs:
        - targets:
          - localhost:9090
      - bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
        job_name: kubernetes-apiservers
        kubernetes_sd_configs:
        - role: endpoints
        relabel_configs:
        - action: keep
          regex: default;kubernetes;https
          source_labels:
          - __meta_kubernetes_namespace
          - __meta_kubernetes_service_name
          - __meta_kubernetes_endpoint_port_name
        scheme: https
        tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
          insecure_skip_verify: true
      - job_name: kubernetes-pods
        kubernetes_sd_configs:
        - role: pod
        relabel_configs:
        - action: keep
          regex: true
          source_labels:
          - __meta_kubernetes_pod_annotation_gitlab_com_prometheus_scrape
        - action: replace
          regex: (.+)
          source_labels:
          - __meta_kubernetes_pod_annotation_gitlab_com_prometheus_path
          target_label: __metrics_path__
        - action: replace
          regex: ([^:]+)(?::\d+)?;(\d+)
          replacement: $1:$2
          source_labels:
          - __address__
          - __meta_kubernetes_pod_annotation_gitlab_com_prometheus_port
          target_label: __address__
        - action: labelmap
          regex: __meta_kubernetes_pod_label_(.+)
        - action: replace
          source_labels:
          - __meta_kubernetes_namespace
          target_label: kubernetes_namespace
        - action: replace
          source_labels:
          - __meta_kubernetes_pod_name
          target_label: kubernetes_pod_name
      - job_name: kubernetes-service-endpoints
        kubernetes_sd_configs:
        - role: endpoints
        relabel_configs:
        - action: keep
          regex: true
          source_labels:
          - __meta_kubernetes_service_annotation_gitlab_com_prometheus_scrape
        - action: replace
          regex: (https?)
          source_labels:
          - __meta_kubernetes_service_annotation_gitlab_com_prometheus_scheme
          target_label: __scheme__
        - action: replace
          regex: (.+)
          source_labels:
          - __meta_kubernetes_service_annotation_gitlab_com_prometheus_path
          target_label: __metrics_path__
        - action: replace
          regex: ([^:]+)(?::\d+)?;(\d+)
          replacement: $1:$2
          source_labels:
          - __address__
          - __meta_kubernetes_service_annotation_gitlab_com_prometheus_port
          target_label: __address__
        - action: labelmap
          regex: __meta_kubernetes_service_label_(.+)
        - action: replace
          source_labels:
          - __meta_kubernetes_namespace
          target_label: kubernetes_namespace
        - action: replace
          source_labels:
          - __meta_kubernetes_service_name
          target_label: kubernetes_name
        - action: replace
          source_labels:
          - __meta_kubernetes_pod_node_name
          target_label: kubernetes_node
      - job_name: kubernetes-services
        kubernetes_sd_configs:
        - role: service
        metrics_path: /probe
        params:
          module:
          - http_2xx
        relabel_configs:
        - action: keep
          regex: true
          source_labels:
          - __meta_kubernetes_service_annotation_gitlab_com_prometheus_probe
        - source_labels:
          - __address__
          target_label: __param_target
        - replacement: blackbox
          target_label: __address__
        - source_labels:
          - __param_target
          target_label: instance
        - action: labelmap
          regex: __meta_kubernetes_service_label_(.+)
        - source_labels:
          - __meta_kubernetes_namespace
          target_label: kubernetes_namespace
        - source_labels:
          - __meta_kubernetes_service_name
          target_label: kubernetes_name
redis:
  cluster:
    enabled: false
  existingSecret: gitlab-redis-secret
  existingSecretKey: redis-password
  install: true
  metrics:
    enabled: true
  usePasswordFile: true
shared-secrets:
  enabled: true
  rbac:
    create: true
upgradeCheck:
  enabled: true
  image: {}
  resources:
    requests:
      cpu: 50m
  securityContext:
    fsGroup: 65534
    runAsUser: 65534
  tolerations: []
